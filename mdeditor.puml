@startuml

enum HttpClientRequestMethod
{
    GET
    POST
    PUT
    DELETE
    UPLOAD
}

class HttpClientPrivateCache
{
    std::function<void(const QString &)> successHandler
    std::function<void(const QString &, int)> failHandler
    std::function<void()> completeHandler
    bool debug
    bool internal
    QString charset
    QNetworkAccessManager* manager
}

class HttpClientPrivate
{
    explicit HttpClientPrivate(QString url)
    ~HttpClientPrivate()
    void stop1()
    HttpClientPrivateCache cache()
    QNetworkAccessManager* getManager()
    static QNetworkRequest createRequest(HttpClientPrivate *d, HttpClientRequestMethod method)
    static void executeQuery(HttpClientPrivate *d, HttpClientRequestMethod method)
    static void upload(HttpClientPrivate *d, const QStringList &paths, const QByteArray &data)
    static void download(HttpClientPrivate *d, const QString &savePath)
    static void download(HttpClientPrivate *d, const std::function<void(const QByteArray &)>& readyRead)
    static QString readReply(QNetworkReply *reply, const QString &charset = "UTF-8")
    static void handleFinish(HttpClientPrivateCache cache, QNetworkReply *reply, const QString &successMessage, const QString &failMessage)
    QString   url
    QString   json
    QUrlQuery params
    QString   charset
    QHash<QString, QString> headers
    QNetworkAccessManager *manager
    bool useJson
    bool debug
    bool internal
    std::function<void(const QString &)> successHandler
    std::function<void(const QString &, int)> failHandler
    std::function<void()> completeHandler
}

HttpClientPrivate <|-- HttpClientPrivateCache

class HttpClient {
    explicit HttpClient(const QString &url)
    ~HttpClient()
    void stop2()
    HttpClient& manager(QNetworkAccessManager *manager)
    HttpClient& debug(bool debug)
    HttpClient& param(const QString &name, const QVariant &value)
    HttpClient& params(const QMap<QString, QVariant> &ps)
    HttpClient& json(const QString &json)
    HttpClient& header(const QString &name, const QString &value)
    HttpClient& headers(const QMap<QString, QString>& nameValues)
    HttpClient& success(std::function<void(const QString &)> successHandler)
    HttpClient& fail(std::function<void(const QString &, int)> failHandler)
    HttpClient& complete(std::function<void()> completeHandler)
    HttpClient& charset(const QString &cs)
    void get()
    void post()
    void put()
    void remove()
    void download(const QString &savePath)
    void upload(const QString &path)
    void upload(const QByteArray &data)
    void upload(const QStringList &paths)
    HttpClientPrivate *d
}

HttpClient <|-- HttpClientPrivate

HttpClientPrivate <|--HttpClientRequestMethod

class AbstractParser
{
    AbstractParser()
    virtual parse_result parseString(const std::string &content)
    virtual parse_result parseFile(const std::string &filename)
}

class Configurable
{
        explicit Configurable(const setting_type &settings)
        Configurable()
        virtual ~Configurable()
        virtual void set(const std::string &key, const std::string &val)
        virtual void set(const std::string &key, const char *val)
        template<typename T> void set(const std::string &key, const T &val)
        virtual std::string &operator[](const std::string &key)
        virtual const std::string &operator[](const std::string &key)
        template<typename T = std::string> T get(const std::string &key)
        virtual void settings(const setting_type &settings)
        virtual setting_type settings()
        std::string &_get(const std::string &key)
        const std::string &_get(const std::string &key)
        setting_type _settings
}

class Parser
{
        AbstractMarkdown *_md
        AbstractDecorator *_decorator
        std::string addHtmlTag(const std::string &content, const std::string &style)
        Parser(AbstractMarkdown *md, AbstractDecorator *decorator) : _md{md}, _decorator(decorator)
        Parser(AbstractMarkdown *md, AbstractDecorator *decorator, const setting_type &settings) : Configurable(settings), _md(md), _decorator(decorator)
        parse_result parseString(const std::string &content)
        parse_result parseFile(const std::string &filename)
        ~Parser()
}

Parser <|-- Configurable
Parser <|-- AbstractParser

class AbstractMarkdown
{
        virtual parse_result parseHeadline(const std::string &line, const std::regex &reg)
        virtual parse_result parseCode(const std::string &line, const std::regex &reg)
        virtual parse_result parseInlineCode(const std::string &line, const std::regex &reg)
        virtual parse_result parseHr(const std::string &line, const std::regex &reg)
        virtual parse_result parseBulletList(const std::string &line, const std::regex &reg)
        virtual parse_result parseNumberedList(const std::string &line, const std::regex &reg)
        virtual parse_result parseBold(const std::string &line, const std::regex &reg)
        virtual parse_result parseItalic(const std::string &line, const std::regex &reg)
        virtual parse_result parseLink(const std::string &line, const std::regex &reg)
        virtual parse_result parseTable(const std::string &line, const std::regex &reg)
        virtual parse_result parseImage(const std::string &line, const std::regex &reg)
        virtual parse_result parseDel(const std::string &line, const std::regex &reg)
        virtual parse_result parseBlockquoting(const std::string &line, const std::regex &reg)
        std::regex headline_pattern
        std::regex bold_pattern
        std::regex italic_pattern
        std::regex del_pattern
        std::regex hr_pattern
        std::regex ul_li_pattern
        std::regex ol_li_pattern
        std::regex link_pattern
        std::regex img_pattern
        std::regex code_pattern
        std::regex inline_code_pattern
        std::regex blockquoting_pattern
        std::regex table_pattern
        AbstractMarkdown()
        virtual std::string parse(std::string text)
}

Parser <|-- AbstractMarkdown

class AbstractDecorator
{
        AbstractDecorator()
        virtual std::string decorate()
        virtual ~AbstractDecorator()
}

class ConfiguredDecorator
{
        ConfiguredDecorator()
        explicit ConfiguredDecorator(const setting_type& settings) : Configurable(settings)
        std::string decorate()
}

ConfiguredDecorator <|-- Configurable
ConfiguredDecorator <|-- AbstractDecorator

    class MarkdownP
    {
        std::stack<int> ul_level
        std::stack<int> ol_level
        int blockquote_level
        std::vector<markdown_regex_expression> regex_handler
        std::vector<markdown_regex_expression> regex_handler_block
        parse_result parseHeadline(const std::string &line, const std::regex &reg)
        parse_result parseCode(const std::string &line, const std::regex &reg)
        parse_result parseInlineCode(const std::string &line, const std::regex &reg)
        parse_result parseHr(const std::string &line, const std::regex &reg)
        parse_result parseBulletList(const std::string &line, const std::regex &reg)
        parse_result parseNumberedList(const std::string &line, const std::regex &reg)
        parse_result parseBold(const std::string &line, const std::regex &reg)
        parse_result parseItalic(const std::string &line, const std::regex &reg)
        parse_result parseLink(const std::string &line, const std::regex &reg)
        parse_result parseTable(const std::string &line, const std::regex &reg)
        parse_result parseImage(const std::string &line, const std::regex &reg)
        parse_result parseBlockquoting(const std::string &line, const std::regex &reg)
        parse_result parseDel(const std::string &line, const std::regex &reg)
        std::string parseLine(std::string line)
        std::string parseBlock(std::string text)
        MarkdownP()
        std::string parse(std::string text)
}

MarkdownP <|-- AbstractMarkdown
Parser <|-- MarkdownP

class CssDecorator
{
        std::string _css_filename
        CssDecorator()
        explicit CssDecorator(std::string css_filename) : _css_filename(std::move(css_filename))
        std::string decorate()
}

CssDecorator <|-- AbstractDecorator



@enduml